% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_decision_trial.R
\name{make_decision_trial}
\alias{make_decision_trial}
\title{Checks whether decision criteria are met and updates trial results accordingly.}
\usage{
make_decision_trial(
  res_list,
  which_cohort,
  Bayes_Sup = NULL,
  Bayes_Fut = NULL,
  w = 0.5,
  P_Sup = NULL,
  P_Fut = NULL,
  interim,
  beta_prior = 0.5,
  analysis_time,
  dataset,
  hist_miss = TRUE,
  sharing_type,
  design_type,
  bio_lag,
  hist_lag,
  arms_per_cohort,
  ...
)
}
\arguments{
\item{res_list}{List item containing individual cohort trial results so far in a format used by the
other functions in this package}

\item{which_cohort}{Current cohort that should be evaluated}

\item{Bayes_Sup}{List of matrices with rows corresponding to number of multiple Bayesian posterior two-arm combination criteria for superiority}

\item{Bayes_Fut}{List of matrices with rows corresponding to number of multiple Bayesian posterior two-arm combination criteria for futility}

\item{w}{If dynamic borrowing, what is the prior choice for w. Default is 0.5.}

\item{P_Sup}{List with sublists corresponding to number of multiple frequentist test-based combination criteria for superiority}

\item{P_Fut}{List with sublists corresponding to number of multiple frequentist test-based combination criteria for futility}

\item{interim}{Is the analysis conducted an interim or a final analysis?}

\item{beta_prior}{Prior parameter for all Beta Distributions. Default is 0.5.}

\item{analysis_time}{Platform Time of Analysis}

\item{dataset}{Dataset to be used for analysis}

\item{hist_miss}{Whether or not to exclude missing histology data}

\item{sharing_type}{Type of Data Sharing to perform}

\item{design_type}{Which design_type to use}

\item{bio_lag}{Biomarker Lag}

\item{hist_lag}{Histology Lag}

\item{arms_per_cohort}{Number of arms per cohort}

\item{...}{Further arguments inherited from simulate_trial}
}
\value{
List containing original res_list and results of decision rules
}
\description{
Given a res_list object, checks the supplied decision criteria and saves the results in the res_list file.
}
\examples{

# Example 1

# Initialize empty data frame
cols <- c("PatID", "ArrivalTime", "Cohort", "Arm", "RespBio", "RespHist", "HistMissing")
df <- matrix(nrow = 100, ncol = length(cols))
colnames(df) <- cols
df <- as.data.frame(df)
df$PatID <- 1:100
df$ArrivalTime <- sort(runif(100, min = 0, max = 5))
df$Cohort <- sample(1:2, 100, replace = TRUE)
df$Arm <- sample(c("Combo", "Plac"), 100, replace = TRUE)
df$RespBio <- sample(0:1, 100, replace = TRUE)
df$RespHist <- sample(0:1, 100, replace = TRUE)
df$HistMissing <- sample(0:1, 100, replace = TRUE, prob = c(0.95, 0.05))

# Comparison Combo vs Mono
Bayes_Sup1 <- matrix(nrow = 3, ncol = 2)
Bayes_Sup1[1,] <- c(0.00, 0.95)
Bayes_Sup1[2,] <- c(0.10, 0.80)
Bayes_Sup1[3,] <- c(0.15, 0.50)
# Comparison Combo vs Backbone
Bayes_Sup2 <- matrix(nrow = 3, ncol = 2)
Bayes_Sup2[1,] <- c(0.00, 0.95)
Bayes_Sup2[2,] <- c(NA, NA)
Bayes_Sup2[3,] <- c(NA, NA)
# Comparison Mono vs Placebo
Bayes_Sup3 <- matrix(nrow = 3, ncol = 2)
Bayes_Sup3[1,] <- c(0.00, 0.95)
Bayes_Sup3[2,] <- c(0.10, 0.80)
Bayes_Sup3[3,] <- c(NA, NA)
#' # Comparison Backbone vs Placebo
Bayes_Sup4 <- matrix(nrow = 3, ncol = 2)
Bayes_Sup4[1,] <- c(0.00, 0.95)
Bayes_Sup4[2,] <- c(0.10, 0.80)
Bayes_Sup4[3,] <- c(NA, NA)
Bayes_Sup <- list(list(Bayes_Sup1, Bayes_Sup2, Bayes_Sup3, Bayes_Sup4),
                  list(Bayes_Sup1, Bayes_Sup2, Bayes_Sup3, Bayes_Sup4))

sharing_type <- "all"
interim <- TRUE
which_cohort <- 1

# DO NOT RUN
make_decision_trial(
res_list = res_list, which_cohort = which_cohort,
interim = interim, missing_prob = missing_prob,
Bayes_Sup = Bayes_Sup, sharing_type = sharing_type,
seed_missing = seed_missing,
)

# Multiple decision rules

# Vergleich Combo vs Mono
Bayes_Fut1 <- matrix(nrow = 1, ncol = 2)
Bayes_Fut1[1,] <- c(NA, NA)
# Vergleich Combo vs Backbone
Bayes_Fut2 <- matrix(nrow = 1, ncol = 2)
Bayes_Fut2[1,] <- c(NA, NA)
# Vergleich Mono vs Placebo
Bayes_Fut3 <- matrix(nrow = 1, ncol = 2)
Bayes_Fut3[1,] <- c(0.00, 0.60)
Bayes_Fut4 <- matrix(nrow = 1, ncol = 2)
Bayes_Fut4[1,] <- c(0.00, 0.60)
Bayes_Fut <- list(list(Bayes_Fut1, Bayes_Fut2, Bayes_Fut3, Bayes_Fut4),
                  list(Bayes_Fut1, Bayes_Fut2, Bayes_Fut3, Bayes_Fut4))

# Comparison Combo vs Mono
P_Sup1 <- list(list(
testfun = function(x) stats::prop.test(x, alternative = "less", correct = FALSE),
p_sup = 0.025, p_adj = "B"))
# Comparison Combo vs Backbone
P_Sup2 <- list(list(
testfun = function(x) stats::prop.test(x, alternative = "less", correct = FALSE),
p_sup = 0.025, p_adj = "B"))
# Comparison Mono vs Placebo
P_Sup3 <- list(list(
testfun = function(x) stats::prop.test(x, alternative = "less", correct = FALSE),
p_sup = 0.050, p_adj = "B"))
P_Sup4 <- list(list(
testfun = function(x) stats::prop.test(x, alternative = "less", correct = FALSE),
p_sup = 0.050, p_adj = "B"))
P_Sup <- list(list(P_Sup1, P_Sup2, P_Sup3, P_Sup4),
              list(P_Sup1, P_Sup2, P_Sup3, P_Sup4))

# Comparison Combo vs Mono
P_Fut1 <- list(list(
testfun = function(x) stats::prop.test(x, alternative = "less", correct = FALSE),
p_fut = 0.5, p_adj = "none"))
# Comparison Combo vs Backbone
P_Fut2 <- list(list(
testfun = function(x) stats::prop.test(x, alternative = "less", correct = FALSE),
p_fut = 0.5, p_adj = "none"))
# Comparison Mono vs Placebo
P_Fut3 <- list(list(
testfun = function(x) stats::prop.test(x, alternative = "less", correct = FALSE),
p_fut = 0.5, p_adj = "none"))
# Comparison Backbone Placebo
P_Fut4 <- list(list(
testfun = function(x) stats::prop.test(x, alternative = "less", correct = FALSE),
p_fut = 0.5, p_adj = "none"))
P_Fut <- list(list(P_Fut1, P_Fut2, P_Fut3, P_Fut4),
              list(P_Fut1, P_Fut2, P_Fut3, P_Fut4))

# DO NOT RUN
make_decision_trial(res_list = res_list, which_cohort = which_cohort, interim = interim,
Bayes_Sup = Bayes_Sup, sharing_type = sharing_type,
Bayes_Fut = Bayes_Fut, Bayes_SA_Sup = Bayes_SA_Sup, Bayes_SA_Fut = Bayes_SA_Fut, P_Sup = P_Sup,
P_Fut = P_Fut, Est_Sup_Fut = Est_Sup_Fut, CI_Sup_Fut = CI_Sup_Fut
)

}
